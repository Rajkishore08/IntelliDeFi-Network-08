/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SuiBridge {
  export type BridgeRequestStruct = {
    requestId: BigNumberish;
    user: AddressLike;
    ethereumTokenId: BigNumberish;
    suiDestination: string;
    timestamp: BigNumberish;
    processed: boolean;
    confirmed: boolean;
  };

  export type BridgeRequestStructOutput = [
    requestId: bigint,
    user: string,
    ethereumTokenId: bigint,
    suiDestination: string,
    timestamp: bigint,
    processed: boolean,
    confirmed: boolean
  ] & {
    requestId: bigint;
    user: string;
    ethereumTokenId: bigint;
    suiDestination: string;
    timestamp: bigint;
    processed: boolean;
    confirmed: boolean;
  };

  export type SuiNFTStruct = {
    suiObjectId: string;
    ethereumTokenId: BigNumberish;
    ethereumOwner: AddressLike;
    metadata: string;
    bridgeTimestamp: BigNumberish;
    isBridged: boolean;
  };

  export type SuiNFTStructOutput = [
    suiObjectId: string,
    ethereumTokenId: bigint,
    ethereumOwner: string,
    metadata: string,
    bridgeTimestamp: bigint,
    isBridged: boolean
  ] & {
    suiObjectId: string;
    ethereumTokenId: bigint;
    ethereumOwner: string;
    metadata: string;
    bridgeTimestamp: bigint;
    isBridged: boolean;
  };

  export type SuiSwapDataStruct = {
    suiObjectId: string;
    fromToken: string;
    toToken: string;
    amount: BigNumberish;
    price: BigNumberish;
    timestamp: BigNumberish;
    success: boolean;
  };

  export type SuiSwapDataStructOutput = [
    suiObjectId: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    price: bigint,
    timestamp: bigint,
    success: boolean
  ] & {
    suiObjectId: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    price: bigint;
    timestamp: bigint;
    success: boolean;
  };
}

export interface SuiBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SUI_MODULE"
      | "SUI_NETWORK"
      | "SUI_PACKAGE_ID"
      | "bridgeRequests"
      | "confirmBridgeRequest"
      | "createBridgeRequest"
      | "generateSuiMintPayload"
      | "generateSuiSwapPayload"
      | "getBridgeRequest"
      | "getSuiNFT"
      | "getSuiNetworkInfo"
      | "getSuiObjectId"
      | "getSuiSwapHistory"
      | "getUserBridgeRequests"
      | "isNFTBridgedToSui"
      | "owner"
      | "pause"
      | "paused"
      | "processBridgeRequest"
      | "recordSuiSwap"
      | "renounceOwnership"
      | "suiNFTs"
      | "suiSwapHistory"
      | "transferOwnership"
      | "unpause"
      | "updateSuiConfig"
      | "userBridgeRequests"
      | "validateSuiAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeRequestConfirmed"
      | "BridgeRequestCreated"
      | "BridgeRequestProcessed"
      | "NFTBridgedToSui"
      | "OwnershipTransferred"
      | "Paused"
      | "SuiConfigUpdated"
      | "SuiSwapExecuted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SUI_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUI_NETWORK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUI_PACKAGE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmBridgeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBridgeRequest",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSuiMintPayload",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSuiSwapPayload",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSuiNFT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSuiNetworkInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuiObjectId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuiSwapHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBridgeRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNFTBridgedToSui",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processBridgeRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordSuiSwap",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "suiNFTs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "suiSwapHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateSuiConfig",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userBridgeRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSuiAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "SUI_MODULE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SUI_NETWORK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUI_PACKAGE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmBridgeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBridgeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSuiMintPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSuiSwapPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSuiNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSuiNetworkInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuiObjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuiSwapHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBridgeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNFTBridgedToSui",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processBridgeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSuiSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suiNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suiSwapHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSuiConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBridgeRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSuiAddress",
    data: BytesLike
  ): Result;
}

export namespace BridgeRequestConfirmedEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeRequestCreatedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    user: AddressLike,
    ethereumTokenId: BigNumberish,
    suiDestination: string
  ];
  export type OutputTuple = [
    requestId: bigint,
    user: string,
    ethereumTokenId: bigint,
    suiDestination: string
  ];
  export interface OutputObject {
    requestId: bigint;
    user: string;
    ethereumTokenId: bigint;
    suiDestination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeRequestProcessedEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTBridgedToSuiEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    suiObjectId: string,
    ethereumTokenId: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    suiObjectId: string,
    ethereumTokenId: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    suiObjectId: string;
    ethereumTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuiConfigUpdatedEvent {
  export type InputTuple = [packageId: string, module: string];
  export type OutputTuple = [packageId: string, module: string];
  export interface OutputObject {
    packageId: string;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuiSwapExecutedEvent {
  export type InputTuple = [
    suiObjectId: string,
    fromToken: string,
    toToken: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    suiObjectId: string,
    fromToken: string,
    toToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    suiObjectId: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SuiBridge extends BaseContract {
  connect(runner?: ContractRunner | null): SuiBridge;
  waitForDeployment(): Promise<this>;

  interface: SuiBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SUI_MODULE: TypedContractMethod<[], [string], "view">;

  SUI_NETWORK: TypedContractMethod<[], [string], "view">;

  SUI_PACKAGE_ID: TypedContractMethod<[], [string], "view">;

  bridgeRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, boolean] & {
        requestId: bigint;
        user: string;
        ethereumTokenId: bigint;
        suiDestination: string;
        timestamp: bigint;
        processed: boolean;
        confirmed: boolean;
      }
    ],
    "view"
  >;

  confirmBridgeRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createBridgeRequest: TypedContractMethod<
    [ethereumTokenId: BigNumberish, suiDestination: string, metadata: string],
    [void],
    "nonpayable"
  >;

  generateSuiMintPayload: TypedContractMethod<
    [requestId: BigNumberish],
    [string],
    "view"
  >;

  generateSuiSwapPayload: TypedContractMethod<
    [
      suiObjectId: string,
      fromToken: string,
      toToken: string,
      amount: BigNumberish
    ],
    [string],
    "view"
  >;

  getBridgeRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [SuiBridge.BridgeRequestStructOutput],
    "view"
  >;

  getSuiNFT: TypedContractMethod<
    [suiObjectId: string],
    [SuiBridge.SuiNFTStructOutput],
    "view"
  >;

  getSuiNetworkInfo: TypedContractMethod<
    [],
    [[string, string] & { network: string; packageId: string }],
    "view"
  >;

  getSuiObjectId: TypedContractMethod<
    [ethereumTokenId: BigNumberish],
    [string],
    "view"
  >;

  getSuiSwapHistory: TypedContractMethod<
    [suiObjectId: string],
    [SuiBridge.SuiSwapDataStructOutput[]],
    "view"
  >;

  getUserBridgeRequests: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  isNFTBridgedToSui: TypedContractMethod<
    [ethereumTokenId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processBridgeRequest: TypedContractMethod<
    [requestId: BigNumberish, suiObjectId: string],
    [void],
    "nonpayable"
  >;

  recordSuiSwap: TypedContractMethod<
    [
      suiObjectId: string,
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  suiNFTs: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string, bigint, boolean] & {
        suiObjectId: string;
        ethereumTokenId: bigint;
        ethereumOwner: string;
        metadata: string;
        bridgeTimestamp: bigint;
        isBridged: boolean;
      }
    ],
    "view"
  >;

  suiSwapHistory: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        suiObjectId: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        price: bigint;
        timestamp: bigint;
        success: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateSuiConfig: TypedContractMethod<
    [newPackageId: string, newModule: string],
    [void],
    "nonpayable"
  >;

  userBridgeRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  validateSuiAddress: TypedContractMethod<
    [suiAddress: string],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SUI_MODULE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUI_NETWORK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUI_PACKAGE_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, boolean] & {
        requestId: bigint;
        user: string;
        ethereumTokenId: bigint;
        suiDestination: string;
        timestamp: bigint;
        processed: boolean;
        confirmed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "confirmBridgeRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createBridgeRequest"
  ): TypedContractMethod<
    [ethereumTokenId: BigNumberish, suiDestination: string, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generateSuiMintPayload"
  ): TypedContractMethod<[requestId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "generateSuiSwapPayload"
  ): TypedContractMethod<
    [
      suiObjectId: string,
      fromToken: string,
      toToken: string,
      amount: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBridgeRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [SuiBridge.BridgeRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSuiNFT"
  ): TypedContractMethod<
    [suiObjectId: string],
    [SuiBridge.SuiNFTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSuiNetworkInfo"
  ): TypedContractMethod<
    [],
    [[string, string] & { network: string; packageId: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSuiObjectId"
  ): TypedContractMethod<[ethereumTokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSuiSwapHistory"
  ): TypedContractMethod<
    [suiObjectId: string],
    [SuiBridge.SuiSwapDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBridgeRequests"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isNFTBridgedToSui"
  ): TypedContractMethod<[ethereumTokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processBridgeRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, suiObjectId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordSuiSwap"
  ): TypedContractMethod<
    [
      suiObjectId: string,
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "suiNFTs"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string, bigint, boolean] & {
        suiObjectId: string;
        ethereumTokenId: bigint;
        ethereumOwner: string;
        metadata: string;
        bridgeTimestamp: bigint;
        isBridged: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "suiSwapHistory"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        suiObjectId: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        price: bigint;
        timestamp: bigint;
        success: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSuiConfig"
  ): TypedContractMethod<
    [newPackageId: string, newModule: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userBridgeRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateSuiAddress"
  ): TypedContractMethod<[suiAddress: string], [boolean], "view">;

  getEvent(
    key: "BridgeRequestConfirmed"
  ): TypedContractEvent<
    BridgeRequestConfirmedEvent.InputTuple,
    BridgeRequestConfirmedEvent.OutputTuple,
    BridgeRequestConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeRequestCreated"
  ): TypedContractEvent<
    BridgeRequestCreatedEvent.InputTuple,
    BridgeRequestCreatedEvent.OutputTuple,
    BridgeRequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeRequestProcessed"
  ): TypedContractEvent<
    BridgeRequestProcessedEvent.InputTuple,
    BridgeRequestProcessedEvent.OutputTuple,
    BridgeRequestProcessedEvent.OutputObject
  >;
  getEvent(
    key: "NFTBridgedToSui"
  ): TypedContractEvent<
    NFTBridgedToSuiEvent.InputTuple,
    NFTBridgedToSuiEvent.OutputTuple,
    NFTBridgedToSuiEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SuiConfigUpdated"
  ): TypedContractEvent<
    SuiConfigUpdatedEvent.InputTuple,
    SuiConfigUpdatedEvent.OutputTuple,
    SuiConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SuiSwapExecuted"
  ): TypedContractEvent<
    SuiSwapExecutedEvent.InputTuple,
    SuiSwapExecutedEvent.OutputTuple,
    SuiSwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BridgeRequestConfirmed(uint256)": TypedContractEvent<
      BridgeRequestConfirmedEvent.InputTuple,
      BridgeRequestConfirmedEvent.OutputTuple,
      BridgeRequestConfirmedEvent.OutputObject
    >;
    BridgeRequestConfirmed: TypedContractEvent<
      BridgeRequestConfirmedEvent.InputTuple,
      BridgeRequestConfirmedEvent.OutputTuple,
      BridgeRequestConfirmedEvent.OutputObject
    >;

    "BridgeRequestCreated(uint256,address,uint256,string)": TypedContractEvent<
      BridgeRequestCreatedEvent.InputTuple,
      BridgeRequestCreatedEvent.OutputTuple,
      BridgeRequestCreatedEvent.OutputObject
    >;
    BridgeRequestCreated: TypedContractEvent<
      BridgeRequestCreatedEvent.InputTuple,
      BridgeRequestCreatedEvent.OutputTuple,
      BridgeRequestCreatedEvent.OutputObject
    >;

    "BridgeRequestProcessed(uint256)": TypedContractEvent<
      BridgeRequestProcessedEvent.InputTuple,
      BridgeRequestProcessedEvent.OutputTuple,
      BridgeRequestProcessedEvent.OutputObject
    >;
    BridgeRequestProcessed: TypedContractEvent<
      BridgeRequestProcessedEvent.InputTuple,
      BridgeRequestProcessedEvent.OutputTuple,
      BridgeRequestProcessedEvent.OutputObject
    >;

    "NFTBridgedToSui(uint256,string,uint256)": TypedContractEvent<
      NFTBridgedToSuiEvent.InputTuple,
      NFTBridgedToSuiEvent.OutputTuple,
      NFTBridgedToSuiEvent.OutputObject
    >;
    NFTBridgedToSui: TypedContractEvent<
      NFTBridgedToSuiEvent.InputTuple,
      NFTBridgedToSuiEvent.OutputTuple,
      NFTBridgedToSuiEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SuiConfigUpdated(string,string)": TypedContractEvent<
      SuiConfigUpdatedEvent.InputTuple,
      SuiConfigUpdatedEvent.OutputTuple,
      SuiConfigUpdatedEvent.OutputObject
    >;
    SuiConfigUpdated: TypedContractEvent<
      SuiConfigUpdatedEvent.InputTuple,
      SuiConfigUpdatedEvent.OutputTuple,
      SuiConfigUpdatedEvent.OutputObject
    >;

    "SuiSwapExecuted(string,string,string,uint256)": TypedContractEvent<
      SuiSwapExecutedEvent.InputTuple,
      SuiSwapExecutedEvent.OutputTuple,
      SuiSwapExecutedEvent.OutputObject
    >;
    SuiSwapExecuted: TypedContractEvent<
      SuiSwapExecutedEvent.InputTuple,
      SuiSwapExecutedEvent.OutputTuple,
      SuiSwapExecutedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
