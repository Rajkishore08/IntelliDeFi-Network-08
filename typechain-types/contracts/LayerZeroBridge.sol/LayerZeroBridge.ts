/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LayerZeroBridge {
  export type BridgeMessageStruct = {
    messageId: BigNumberish;
    payload: BytesLike;
    sourceChainId: BigNumberish;
    destinationChainId: BigNumberish;
    timestamp: BigNumberish;
    processed: boolean;
  };

  export type BridgeMessageStructOutput = [
    messageId: bigint,
    payload: string,
    sourceChainId: bigint,
    destinationChainId: bigint,
    timestamp: bigint,
    processed: boolean
  ] & {
    messageId: bigint;
    payload: string;
    sourceChainId: bigint;
    destinationChainId: bigint;
    timestamp: bigint;
    processed: boolean;
  };

  export type CrossChainSwapStruct = {
    swapId: BigNumberish;
    user: AddressLike;
    fromToken: string;
    toToken: string;
    amount: BigNumberish;
    price: BigNumberish;
    fromChain: string;
    toChain: string;
    timestamp: BigNumberish;
    executed: boolean;
    confirmed: boolean;
  };

  export type CrossChainSwapStructOutput = [
    swapId: bigint,
    user: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    price: bigint,
    fromChain: string,
    toChain: string,
    timestamp: bigint,
    executed: boolean,
    confirmed: boolean
  ] & {
    swapId: bigint;
    user: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    price: bigint;
    fromChain: string;
    toChain: string;
    timestamp: bigint;
    executed: boolean;
    confirmed: boolean;
  };
}

export interface LayerZeroBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSupportedChain"
      | "bridgeMessages"
      | "chainNameToId"
      | "crossChainSwaps"
      | "executeCrossChainSwap"
      | "getBridgeMessage"
      | "getChainIdByName"
      | "getCrossChainSwap"
      | "initiateCrossChainSwap"
      | "isChainSupported"
      | "lzEndpoint"
      | "owner"
      | "pause"
      | "paused"
      | "removeSupportedChain"
      | "renounceOwnership"
      | "supportedChains"
      | "transferOwnership"
      | "unpause"
      | "updateLayerZeroEndpoint"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeMessageReceived"
      | "ChainRemoved"
      | "ChainSupported"
      | "CrossChainSwapExecuted"
      | "CrossChainSwapInitiated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSupportedChain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainNameToId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainSwaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCrossChainSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainIdByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossChainSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateCrossChainSwap",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isChainSupported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLayerZeroEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainNameToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCrossChainSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainIdByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossChainSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateCrossChainSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLayerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace BridgeMessageReceivedEvent {
  export type InputTuple = [
    messageId: BigNumberish,
    sourceChainId: BigNumberish,
    destinationChainId: BigNumberish
  ];
  export type OutputTuple = [
    messageId: bigint,
    sourceChainId: bigint,
    destinationChainId: bigint
  ];
  export interface OutputObject {
    messageId: bigint;
    sourceChainId: bigint;
    destinationChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainRemovedEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainSupportedEvent {
  export type InputTuple = [chainId: BigNumberish, chainName: string];
  export type OutputTuple = [chainId: bigint, chainName: string];
  export interface OutputObject {
    chainId: bigint;
    chainName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainSwapExecutedEvent {
  export type InputTuple = [
    swapId: BigNumberish,
    fromChain: string,
    toChain: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    swapId: bigint,
    fromChain: string,
    toChain: string,
    amount: bigint
  ];
  export interface OutputObject {
    swapId: bigint;
    fromChain: string;
    toChain: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainSwapInitiatedEvent {
  export type InputTuple = [
    swapId: BigNumberish,
    user: AddressLike,
    fromToken: string,
    toToken: string,
    fromChain: string,
    toChain: string
  ];
  export type OutputTuple = [
    swapId: bigint,
    user: string,
    fromToken: string,
    toToken: string,
    fromChain: string,
    toChain: string
  ];
  export interface OutputObject {
    swapId: bigint;
    user: string;
    fromToken: string;
    toToken: string;
    fromChain: string;
    toChain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LayerZeroBridge extends BaseContract {
  connect(runner?: ContractRunner | null): LayerZeroBridge;
  waitForDeployment(): Promise<this>;

  interface: LayerZeroBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSupportedChain: TypedContractMethod<
    [chainId: BigNumberish, chainName: string],
    [void],
    "nonpayable"
  >;

  bridgeMessages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        messageId: bigint;
        payload: string;
        sourceChainId: bigint;
        destinationChainId: bigint;
        timestamp: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;

  chainNameToId: TypedContractMethod<[arg0: string], [bigint], "view">;

  crossChainSwaps: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        swapId: bigint;
        user: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        price: bigint;
        fromChain: string;
        toChain: string;
        timestamp: bigint;
        executed: boolean;
        confirmed: boolean;
      }
    ],
    "view"
  >;

  executeCrossChainSwap: TypedContractMethod<
    [swapId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBridgeMessage: TypedContractMethod<
    [messageId: BigNumberish],
    [LayerZeroBridge.BridgeMessageStructOutput],
    "view"
  >;

  getChainIdByName: TypedContractMethod<[chainName: string], [bigint], "view">;

  getCrossChainSwap: TypedContractMethod<
    [swapId: BigNumberish],
    [LayerZeroBridge.CrossChainSwapStructOutput],
    "view"
  >;

  initiateCrossChainSwap: TypedContractMethod<
    [
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      fromChain: string,
      toChain: string
    ],
    [void],
    "payable"
  >;

  isChainSupported: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeSupportedChain: TypedContractMethod<
    [chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  supportedChains: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateLayerZeroEndpoint: TypedContractMethod<
    [newEndpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSupportedChain"
  ): TypedContractMethod<
    [chainId: BigNumberish, chainName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeMessages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        messageId: bigint;
        payload: string;
        sourceChainId: bigint;
        destinationChainId: bigint;
        timestamp: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainNameToId"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "crossChainSwaps"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        swapId: bigint;
        user: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        price: bigint;
        fromChain: string;
        toChain: string;
        timestamp: bigint;
        executed: boolean;
        confirmed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeCrossChainSwap"
  ): TypedContractMethod<[swapId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBridgeMessage"
  ): TypedContractMethod<
    [messageId: BigNumberish],
    [LayerZeroBridge.BridgeMessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainIdByName"
  ): TypedContractMethod<[chainName: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCrossChainSwap"
  ): TypedContractMethod<
    [swapId: BigNumberish],
    [LayerZeroBridge.CrossChainSwapStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateCrossChainSwap"
  ): TypedContractMethod<
    [
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      fromChain: string,
      toChain: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isChainSupported"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeSupportedChain"
  ): TypedContractMethod<[chainId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLayerZeroEndpoint"
  ): TypedContractMethod<[newEndpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BridgeMessageReceived"
  ): TypedContractEvent<
    BridgeMessageReceivedEvent.InputTuple,
    BridgeMessageReceivedEvent.OutputTuple,
    BridgeMessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ChainRemoved"
  ): TypedContractEvent<
    ChainRemovedEvent.InputTuple,
    ChainRemovedEvent.OutputTuple,
    ChainRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ChainSupported"
  ): TypedContractEvent<
    ChainSupportedEvent.InputTuple,
    ChainSupportedEvent.OutputTuple,
    ChainSupportedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainSwapExecuted"
  ): TypedContractEvent<
    CrossChainSwapExecutedEvent.InputTuple,
    CrossChainSwapExecutedEvent.OutputTuple,
    CrossChainSwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainSwapInitiated"
  ): TypedContractEvent<
    CrossChainSwapInitiatedEvent.InputTuple,
    CrossChainSwapInitiatedEvent.OutputTuple,
    CrossChainSwapInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BridgeMessageReceived(uint256,uint16,uint16)": TypedContractEvent<
      BridgeMessageReceivedEvent.InputTuple,
      BridgeMessageReceivedEvent.OutputTuple,
      BridgeMessageReceivedEvent.OutputObject
    >;
    BridgeMessageReceived: TypedContractEvent<
      BridgeMessageReceivedEvent.InputTuple,
      BridgeMessageReceivedEvent.OutputTuple,
      BridgeMessageReceivedEvent.OutputObject
    >;

    "ChainRemoved(uint16)": TypedContractEvent<
      ChainRemovedEvent.InputTuple,
      ChainRemovedEvent.OutputTuple,
      ChainRemovedEvent.OutputObject
    >;
    ChainRemoved: TypedContractEvent<
      ChainRemovedEvent.InputTuple,
      ChainRemovedEvent.OutputTuple,
      ChainRemovedEvent.OutputObject
    >;

    "ChainSupported(uint16,string)": TypedContractEvent<
      ChainSupportedEvent.InputTuple,
      ChainSupportedEvent.OutputTuple,
      ChainSupportedEvent.OutputObject
    >;
    ChainSupported: TypedContractEvent<
      ChainSupportedEvent.InputTuple,
      ChainSupportedEvent.OutputTuple,
      ChainSupportedEvent.OutputObject
    >;

    "CrossChainSwapExecuted(uint256,string,string,uint256)": TypedContractEvent<
      CrossChainSwapExecutedEvent.InputTuple,
      CrossChainSwapExecutedEvent.OutputTuple,
      CrossChainSwapExecutedEvent.OutputObject
    >;
    CrossChainSwapExecuted: TypedContractEvent<
      CrossChainSwapExecutedEvent.InputTuple,
      CrossChainSwapExecutedEvent.OutputTuple,
      CrossChainSwapExecutedEvent.OutputObject
    >;

    "CrossChainSwapInitiated(uint256,address,string,string,string,string)": TypedContractEvent<
      CrossChainSwapInitiatedEvent.InputTuple,
      CrossChainSwapInitiatedEvent.OutputTuple,
      CrossChainSwapInitiatedEvent.OutputObject
    >;
    CrossChainSwapInitiated: TypedContractEvent<
      CrossChainSwapInitiatedEvent.InputTuple,
      CrossChainSwapInitiatedEvent.OutputTuple,
      CrossChainSwapInitiatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
